/*********************************************************************
 *  字句解析時に yylex() で返される語の種類(tag)の定義
 *********************************************************************/

%{

#define INTEGER      1  /* 整数を示す tag */
#define OPERATOR     2  /* 演算子を示す tag */
#define PARENTHESES  3  /* 括弧を示す tag */

%}

/*********************************************************************
 *  分類される語の正規表現 ( r(X) の X の部分のみ記述 )
 *********************************************************************/

integer     "0"|[1-9][0-9]*
operator    "+"|"-"|"*"|"/"
parentheses "("|")"

/*** 注1: [0-9] は "0"|"1"|"2"|"3"|...|"8"|"9" の省略表記 ***/

/*********************************************************************
 *  字句解析ルール
 *********************************************************************/

%%

{integer}     { return INTEGER; }      /* 整数なら整数の tag を返す */
{operator}    { return OPERATOR; }     /* 演算子なら演算子の tag を返す */
{parentheses} { return PARENTHESES; }  /* 括弧なら括弧の tag を返す */
"\n"          { return 0; }            /* 改行によって解析終了 */
[" ""\t"]+                             /* 空白と TAB は読み飛ばす */
.           { printf("Error: '%c'\n", yytext[0]); exit(1); }

%%

/*** 注2: X+ は XX* の省略表記 ***/
/*** 注3: . は任意の一文字にマッチする ***/

/*********************************************************************
 *  字句解析メインルーチン
 *********************************************************************/

int main()
{
        int tag;          /* 語の種類 */
        int line_num = 0; /* 行番号 */

        while (tag = yylex()) {
                /*
                    yylex() は語の種類を戻値とし，yytext に切り出された語を
                    割り当てる．
                */
                printf("[%2d] ", ++line_num);
                printf("tag = %2d, ", tag);
                printf("text = %s\n", yytext);
        }
        return 0;
}
